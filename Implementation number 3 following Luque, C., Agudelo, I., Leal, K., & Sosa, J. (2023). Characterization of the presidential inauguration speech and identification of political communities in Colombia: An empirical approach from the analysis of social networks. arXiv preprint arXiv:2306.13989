#packages and libraries
install.packages("igraph")
install.packages("vctrs")
install.packages("ggraph") 
install.packages("gridExtra")
install.packages("egg")
install.packages("gtable")
install.packages("grid")
install.packages("readr")
install.packages("blockmodels")
install.packages("ergm")
install.packages("network")
install.packages("latentnet")
install.packages("colorspace")
install.packages("plotrix")
library(plotrix)
library(RColorBrewer)
library(colorspace)
library(igraph)
library(ggraph)
library(xtable)
library(gridExtra) 
library(egg)
library(gtable)
library(grid)
library(readr)
library(blockmodels)
library(ergm)
library(network)
library(latentnet)

getwd()
setwd("D:\\Escritorio\\Tesis")

#Data
work <- read_csv("work-edges.csv")
alliance <- read_csv("alliance-edges.csv")
nodes <- read_csv("nodes.csv")

# Graphs
g_work <- graph_from_data_frame(d =work, directed = F, vertices = nodes$Id)
g_alliance <- graph_from_data_frame(d =alliance, directed = F, vertices = nodes$Id)

## The graph induced by the connected component WORK
V(g_work)$cluster <- clusters(graph = g_work)$membership
gcc_work <- induced_subgraph(graph = g_work, vids = which(V(g_work)$cluster == which.max(clusters(graph = g_work)$csize))) 

########SBM
# Adgencency matrix
MW <- as.matrix(igraph::as_adjacency_matrix(gcc_work))
dim(MW)
MA <- as.matrix(igraph::as_adjacency_matrix(gcc_alliance))
dim(MA)

# Model formulation
set.seed(73)
work.sbm <- blockmodels::BM_bernoulli(membership_type = "SBM_sym", adj = MW, verbosity = 0, plotting = "")
alli.sbm <- blockmodels::BM_bernoulli(membership_type = "SBM_sym", adj = MA, verbosity = 0, plotting = "")

# Parameter estimation
work.sbm$estimate()
alli.sbm$estimate()

#Optimal number of blocks
Q <- which.max(work.sbm$ICL)
Q2 <- which.max(alli.sbm$ICL)

#plots number of groups (likelihood maximization)
windows(10,6)
par(mfrow = c(1,2), mgp = c(3,0.7,0))
plot(work.sbm$ICL, xlab = "Q", ylab = "ICL", type = "b", pch = 16,main = "Work",col.main="#00868B")
lines(x = c(Q,Q), y = c(min(work.sbm$ICL),max(work.sbm$ICL)), col = "red", lty = 2)
plot(alli.sbm$ICL, xlab = "Q", ylab = "ICL", type = "b", pch = 16,main="Alliance",col.main="#00868B")
lines(x = c(Q2,Q2), y = c(min(alli.sbm$ICL),max(alli.sbm$ICL)), col = "red", lty = 2)

# Estimated probabilities of node membership to the communities
Z <- work.sbm$memberships[[Q]]$Z
Z2 <- alli.sbm$memberships[[Q2]]$Z
head(Z)
head(x = round(Z,3), n = 10)

# Node assignments to communities 
labs <- apply(X = Z, MARGIN = 1, FUN = which.max)
labs2 <- apply(X = Z2, MARGIN = 1, FUN = which.max)

#Proportion of individuals per community
alpha <- table(labs)/vcount(gcc_work)
alpha2 <- table(labs2)/vcount(gcc_alliance)

xtable::xtable(cbind(rbind(table(labs),alpha),rbind(table(labs2),alpha2)))

#Probabilities of the blocks (ordered)
round(alpha[order(alpha, decreasing = T)], 3)
round(alpha2[order(alpha2, decreasing = T)], 3)

#Matrix of interaction probabilities
Pi <- work.sbm$model_parameters[[Q]]$pi
Pi2 <- alli.sbm$model_parameters[[Q2]]$pi
Pi <- 0.5*(t(Pi) + Pi)
Pi2 <- 0.5*(t(Pi2) + Pi2)

# Graphs of interaction probabilities
windows(width = 18, height = 10)
par(mfrow = c(1,2), mar = c(3,1.3,3,3))
corrplot::corrplot(corr = Pi, type = "full", col.lim = c(0,1),  method = "shade", addgrid.col = "gray90", tl.col = "black")
title("Work",col.main="#00868B")
corrplot::corrplot(corr = Pi2, type = "full", col.lim = c(0,1),  method = "shade", addgrid.col = "gray90", tl.col = "black")
title("Alliance", col.main="#00868B")

#Goodness of fit

##Work ----

# Simulations
B<-10000
set.seed(42)
bs <- stats::rmultinom(n = B, size = vcount(gcc_work), prob = alpha)
GSIM<-NULL
for (i in 1:B){
  GSIM[[i]]<-igraph::sample_sbm(n = vcount(gcc_work), pref.matrix = Pi, block.sizes = bs[,i], directed = F)
}


### PPP 
A_DescriptivoP1 <- function(Lista){
  
  Densidad      <- sapply(X = Lista, FUN = edge_density)
  Coef_Agrupa   <- sapply(X = Lista, FUN = transitivity)
  Asorta <- sapply(X = Lista, FUN = assortativity_degree)
  Dist_Geod     <- sapply(X = Lista, FUN = mean_distance)
  Comp_Gigante  <- sapply(X = Lista, FUN = function(X) (max(sapply(X = decompose(X), FUN = vcount))))
  Tabla         <- as.data.frame(cbind(Densidad,Coef_Agrupa,Asorta,
                                       Dist_Geod,Comp_Gigante))
  return(Tabla)
}

PPP<-A_DescriptivoP1(GSIM)
P <- 0.05

windows(17,10)
ppp <- c(mean(edge_density(gcc_work) < PPP$Densidad),
         mean(transitivity(gcc_work) < PPP$Coef_Agrupa),
         mean(assortativity.degree(gcc_work) < PPP$Asorta),
         mean(mean_distance(gcc_work) < PPP$Dist_Geod),
         mean(max(sapply(X = decompose(gcc_work), FUN = vcount)) < PPP$Comp_Gigante))
ppp <- round(ppp,3)

grid.arrange(
  #Density
  ggplot(PPP, aes(x = Densidad)) + 
    geom_histogram(aes(y = ..density..),
                   colour = "gray86", fill = "gray86") +
    geom_vline(xintercept = edge_density(gcc_work), colour="#FF6347", lwd=1)+
    geom_vline(xintercept = quantile(PPP$Densidad, probs = c(P/2, 1-P/2)), color="turquoise", lwd=1, lty=2)+
    geom_vline(xintercept = mean(PPP$Densidad), color="dodgerblue4" ,lwd=1, lty = 4)+
    labs(y="", x="Density")+
    geom_label(aes(x=0.0175, y=210, label=ppp[1]), stat = "unique") +
    theme(panel.background = element_blank()),
  #Transitivity
  ggplot(PPP, aes(x = Coef_Agrupa)) + 
    geom_histogram(aes(y = ..density..),
                   colour = "gray86", fill = "gray86") +
    geom_vline(xintercept = transitivity(gcc_work) , colour="#FF6347", lwd=1)+
    geom_vline(xintercept = quantile(PPP$Coef_Agrupa, probs = c(P/2, 1-P/2)), color="turquoise", lwd=1, lty=2)+
    geom_vline(xintercept = mean(PPP$Coef_Agrupa), color="dodgerblue4" ,lwd=1, lty = 4)+
    labs(y="", x="Transitivity")+
    geom_label(aes(x=0.133, y=36.25, label=ppp[2]), stat = "unique") +
    theme(panel.background = element_blank()),
  #Assortativity
  ggplot(PPP, aes(x = Asorta)) + 
    geom_histogram(aes(y = ..density..),
                   colour = "gray86", fill = "gray86") +
    geom_vline(xintercept = assortativity_degree(gcc_work) , colour="#FF6347", lwd=1)+
    geom_vline(xintercept = quantile(PPP$Asorta, probs = c(P/2, 1-P/2)), color="turquoise", lwd=1, lty=2)+
    geom_vline(xintercept = mean(PPP$Asorta), color="dodgerblue4", lwd=1, lty = 4)+
    labs(y="", x="Assortativity")+
    geom_label(aes(x=0, y=9.4, label=ppp[3]), stat = "unique") +
    theme(panel.background = element_blank()),
  #Geodesic Distance
  ggplot(PPP, aes(x = Dist_Geod)) + 
    geom_histogram(aes(y = ..density..),
                   colour = "gray86", fill = "gray86") +
    geom_vline(xintercept = mean_distance(gcc_work) , colour="#FF6347", lwd=1)+
    geom_vline(xintercept = quantile(PPP$Dist_Geod, probs = c(P/2, 1-P/2)), color="turquoise", lwd=1, lty=2)+
    geom_vline(xintercept = mean(PPP$Dist_Geod), color="dodgerblue4", lwd=1, lty = 4)+
    labs(y="", x="Geodesic Distance")+
    geom_label(aes(x=4.6, y=1.32, label=ppp[4]), stat = "unique") +
    theme(panel.background = element_blank()),
  #Size of Giant Component
  ggplot(PPP, aes(x = Comp_Gigante)) + 
    geom_histogram(aes(y = ..density..),
                   colour = "gray86", fill = "gray86") +
    geom_vline(xintercept = max(sapply(X = decompose(gcc_work), FUN = vcount)) , colour="#FF6347", lwd=1)+
    geom_vline(xintercept = quantile(PPP$Comp_Gigante, probs = c(P/2, 1-P/2)), color="turquoise", lwd=1, lty=2)+
    geom_vline(xintercept = mean(PPP$Comp_Gigante), color="dodgerblue4", lwd=1, lty = 4)+
    labs(y="", x="Size of Giant Component")+
    geom_label(aes(x=475, y=0.0405, label="0.000"), stat = "unique") +
    theme(panel.background = element_blank()),
  
  
  ncol=3,
  right = legendGrob(c("Observed", "Quantiles", "Mean"),
                     gp=gpar(lty = c(1,2,4), col= c("#FF6347", "turquoise", "dodgerblue4")))
)


##Alliance

# Simulations
set.seed(42)
bs2 <- stats::rmultinom(n = B, size = vcount(gcc_alliance), prob = alpha2)
GSIM2<-NULL
for (i in 1:B){
  GSIM2[[i]]<-igraph::sample_sbm(n = vcount(gcc_alliance), pref.matrix = Pi2, block.sizes = bs2[,i], directed = F)
  
}

###  PPP
PPP2<-A_DescriptivoP1(GSIM2)

ppp2 <- c(mean(edge_density(gcc_alliance) < PPP2$Densidad),
          mean(transitivity(gcc_alliance) < PPP2$Coef_Agrupa),
          mean(assortativity.degree(gcc_alliance) < PPP2$Asorta),
          mean(mean_distance(gcc_alliance) < PPP2$Dist_Geod),
          mean(max(sapply(X = decompose(gcc_alliance), FUN = vcount)) < PPP2$Comp_Gigante))
ppp2 <- round(ppp2,3)

windows(17,10)
grid.arrange(
  #Density
  ggplot(PPP2, aes(x = Densidad)) + 
    geom_histogram(aes(y = ..density..),
                   colour = "gray86", fill = "gray86") +
    geom_vline(xintercept = edge_density(gcc_alliance), colour="#FF6347", lwd=1)+
    geom_vline(xintercept = quantile(PPP2$Densidad, probs = c(P/2, 1-P/2)), color="turquoise", lwd=1, lty=2)+
    geom_vline(xintercept = mean(PPP2$Densidad), color="dodgerblue4" ,lwd=1, lty = 4)+
    labs(y="", x="Density")+
    geom_label(aes(x=0.0165, y=240, label=ppp2[1]), stat = "unique") +
    theme(panel.background = element_blank()),
  #Transitivity
  ggplot(PPP2, aes(x = Coef_Agrupa)) + 
    geom_histogram(aes(y = ..density..),
                   colour = "gray86", fill = "gray86") +
    geom_vline(xintercept = transitivity(gcc_alliance) , colour="#FF6347", lwd=1)+
    geom_vline(xintercept = quantile(PPP2$Coef_Agrupa, probs = c(P/2, 1-P/2)), color="turquoise", lwd=1, lty=2)+
    geom_vline(xintercept = mean(PPP2$Coef_Agrupa), color="dodgerblue4" ,lwd=1, lty = 4)+
    labs(y="", x="Transitivity")+
    geom_label(aes(x=0.22, y=17.2, label=ppp2[2]), stat = "unique") +
    theme(panel.background = element_blank()),
  #Assortativity
  ggplot(PPP2, aes(x = Asorta)) + 
    geom_histogram(aes(y = ..density..),
                   colour = "gray86", fill = "gray86") +
    geom_vline(xintercept = assortativity_degree(gcc_alliance) , colour="#FF6347", lwd=1)+
    geom_vline(xintercept = quantile(PPP2$Asorta, probs = c(P/2, 1-P/2)), color="turquoise", lwd=1, lty=2)+
    geom_vline(xintercept = mean(PPP2$Asorta), color="dodgerblue4", lwd=1, lty = 4)+
    labs(y="", x="Assortativity")+
    geom_label(aes(x=0.34, y=4.348, label=ppp2[3]), stat = "unique") +
    theme(panel.background = element_blank()),
  #Geodesic Distance
  ggplot(PPP2, aes(x = Dist_Geod)) + 
    geom_histogram(aes(y = ..density..),
                   colour = "gray86", fill = "gray86") +
    geom_vline(xintercept = mean_distance(gcc_alliance) , colour="#FF6347", lwd=1)+
    geom_vline(xintercept = quantile(PPP2$Dist_Geod, probs = c(P/2, 1-P/2)), color="turquoise", lwd=1, lty=2)+
    geom_vline(xintercept = mean(PPP2$Dist_Geod), color="dodgerblue4", lwd=1, lty = 4)+
    labs(y="", x="Geodesic Distance")+
    geom_label(aes(x=5.22, y=1.2, label=ppp2[4]), stat = "unique") +
    theme(panel.background = element_blank()),
  #Size of Giant Component
  ggplot(PPP2, aes(x = Comp_Gigante)) + 
    geom_histogram(aes(y = ..density..),
                   colour = "gray86", fill = "gray86") +
    geom_vline(xintercept = max(sapply(X = decompose(gcc_alliance), FUN = vcount)) , colour="#FF6347", lwd=1)+
    geom_vline(xintercept = quantile(PPP2$Comp_Gigante, probs = c(P/2, 1-P/2)), color="turquoise", lwd=1, lty=2)+
    geom_vline(xintercept = mean(PPP2$Comp_Gigante), color="dodgerblue4", lwd=1, lty = 4)+
    labs(y="", x="Size of Giant Component")+
    geom_label(aes(x=323, y=0.036, label="0.000"), stat = "unique") +
    theme(panel.background = element_blank()),
  
  ncol=3,
  right = legendGrob(c("Observado", "Cuantiles", "Media"),
                     gp=gpar(lty = c(1,2,4), col= c("#FF6347", "turquoise", "dodgerblue4")))
)
